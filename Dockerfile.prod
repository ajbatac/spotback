# Dockerfile for Production Environment

# ---- Base ----
# Use an official Node.js runtime as a parent image.
# Alpine Linux is used for its small size.
FROM node:18-alpine AS base
WORKDIR /app


# ---- Dependencies ----
# Install dependencies first, in a separate step to leverage Docker's layer caching.
FROM base AS deps
COPY package.json package-lock.json* ./
RUN npm install --production


# ---- Builder ----
# Build the Next.js application.
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# The build script will generate the .next folder with the production-ready app.
RUN npm run build


# ---- Runner ----
# The final, minimal image for running the application.
FROM base AS runner
WORKDIR /app

# Set the environment to production
ENV NODE_ENV=production

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# The Next.js app runs on port 9002 by default in our npm script
EXPOSE 9002

# The command to run the production server.
CMD ["node", "server.js"]
